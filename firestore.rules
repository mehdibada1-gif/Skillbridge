
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Users can only read/write their own data, but some public profile data is readable by others.
    match /users/{userId} {
      // Allow user creation on signup
      allow create: if request.auth != null && request.auth.uid == userId;
      
      // Allow users to read their own full profile
      allow get: if request.auth != null && request.auth.uid == userId;

      // Allow authenticated users to read public profile data for community/portfolio pages
      allow list: if request.auth != null;

      // Users can only update their own profile with specific, allowed fields
      allow update: if request.auth != null && request.auth.uid == userId
                    && request.resource.data.keys().hasOnly(['name', 'bio', 'photoURL', 'linkedinUrl', 'skills']);
                    
      // Prevent users from deleting their own profiles
      allow delete: if false;
    }

    // Learning paths are seeded and should not be client-writable. Read by all.
    match /learningPaths/{pathId} {
      allow read: if true;
      allow write: if false;
    }

    // Job opportunities are seeded and should not be client-writable. Read by all.
    match /jobs/{jobId} {
      allow read: if true;
      allow write: if false;
    }
    
    // Articles are seeded and should not be client-writable. Read by all.
    match /articles/{articleId} {
        allow read: if true;
        allow write: if false;
    }

    // A user can only manage their own job applications
    match /jobApplications/{applicationId} {
      allow read, delete: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow update: if false;
    }
    
    // A user can only manage their own saved articles
    match /savedArticles/{savedArticleId} {
       allow read, delete: if request.auth != null && request.resource.data.userId == request.auth.uid;
       allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
       allow update: if false;
    }
  }
}
